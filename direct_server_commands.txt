# DIRECT COMMANDS TO RUN ON YOUR PRODUCTION SERVER
# SSH into your server and run these commands one by one:

# 1. Check what's actually running
ps aux | grep -E "(gunicorn|flask|python.*wsgi)" | grep -v grep
sudo systemctl status caddy --no-pager

# 2. Check current Caddyfile
sudo cat /etc/caddy/Caddyfile

# 3. Replace Caddyfile with working config
sudo tee /etc/caddy/Caddyfile > /dev/null << 'EOF'
traderedgepro.com {
    handle /api/* {
        reverse_proxy localhost:5000
    }
    
    handle /debug/* {
        reverse_proxy localhost:5000
    }
    
    handle {
        root * /var/www/trading-journal/dist
        try_files {path} /index.html
        file_server
    }
    
    header {
        X-Frame-Options SAMEORIGIN
        X-Content-Type-Options nosniff
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "no-referrer-when-downgrade"
        Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://m.stripe.network https://s3.tradingview.com; style-src 'self' 'unsafe-inline' 'unsafe-hashes' https://m.stripe.network; frame-src 'self' https://js.stripe.com https://hooks.stripe.com https://m.stripe.network; connect-src 'self' https://api.stripe.com https://m.stripe.network; img-src 'self' data: https:; font-src 'self' data: https:;"
    }
    
    encode gzip
    
    log {
        output file /var/log/caddy/access.log
        format json
    }
}
EOF

# 4. Validate and reload Caddy
sudo caddy validate --config /etc/caddy/Caddyfile
sudo systemctl reload caddy

# 5. Start Flask backend if not running
cd /var/www/trading-journal
sudo pkill -f gunicorn || true
sudo -u www-data gunicorn --bind 127.0.0.1:5000 --workers 3 --timeout 120 wsgi_production_fixed:app &

# 6. Test the API
sleep 3
curl -X POST https://traderedgepro.com/api/auth/register -H "Content-Type: application/json" -d '{"firstName":"Test","lastName":"User","email":"test@example.com","password":"TestPassword123!"}'
