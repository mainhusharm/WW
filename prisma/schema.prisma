// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                   String   @id @default(cuid())
  email                String   @unique
  passwordHash         String   @map("password_hash")
  firstName            String?  @map("first_name")
  lastName             String?  @map("last_name")
  fullName             String?  @map("full_name")
  phone                String?  @map("phone")
  company              String?  @map("company")
  country              String?  @map("country")
  tradingExperience    String?  @map("trading_experience")
  tradingGoals         String?  @map("trading_goals")
  riskTolerance        String?  @map("risk_tolerance")
  preferredMarkets     String?  @map("preferred_markets")
  tradingStyle         String?  @map("trading_style")
  agreeToMarketing     Boolean  @default(false) @map("agree_to_marketing")
  questionnaireData    String?  @map("questionnaire_data")
  screenshotUrl        String?  @map("screenshot_url")
  riskManagementPlan   String?  @map("risk_management_plan")
  status               String   @default("PENDING")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  
  // Relations
  payments             Payment[]
  
  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("users")
}

model Payment {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  planName        String   @map("plan_name")
  originalPrice   Float    @map("original_price")
  discount        Float    @default(0)
  finalPrice      Float    @map("final_price")
  couponCode      String?  @map("coupon_code")
  paymentMethod   String   @map("payment_method")
  status          String   @default("pending")
  transactionId   String?  @map("transaction_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

// Status enum values: PENDING, PROCESSING, COMPLETED, REJECTED
